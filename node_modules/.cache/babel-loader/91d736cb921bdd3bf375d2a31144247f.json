{"ast":null,"code":"import validation from 'validator';\nimport ruleBuilder from './ruleBuilder';\nimport { CHECKBOX, RADIO, SELECT_MULTIPLE, FILE } from '../constants';\nimport en from '../locales/en.json';\nlet errors = {};\nlet eClass = '';\n\nconst monitor = (valid, nodeRef, rule, value = '') => {\n  if (valid) {\n    if (!errors[nodeRef.name]) nodeRef.classList.remove(eClass);\n    return;\n  }\n\n  const errorMsg = en[rule].replace(':attribute', nodeRef.name).replace(':value', value);\n  Array.isArray(errors[nodeRef.name]) ? errors[nodeRef.name].push(errorMsg) : errors[nodeRef.name] = [errorMsg];\n  return nodeRef.classList.add(eClass);\n};\n\nconst validator = (nodeRefs, errorClass = 'v-error') => {\n  errors = {};\n  eClass = errorClass;\n  nodeRefs.forEach(nodeRef => {\n    const data = nodeRef.getAttribute('data-validator');\n    if (!data) return;\n    const rules = ruleBuilder(data);\n    rules.forEach(rule => {\n      const root = Object.keys(rule)[0];\n\n      switch (root) {\n        case 'required':\n          let node = null;\n\n          switch (nodeRef.type) {\n            case CHECKBOX:\n              node = nodeRef.checked;\n              break;\n\n            case RADIO:\n              node = nodeRef.checked;\n              break;\n\n            case SELECT_MULTIPLE:\n              node = [].filter.call(nodeRef.options, option => option.selected).map(option => option.value).length;\n              break;\n\n            case FILE:\n              node = nodeRef.files.length;\n              break;\n\n            default:\n              node = nodeRef.value;\n              break;\n          }\n\n          monitor(node, nodeRef, root);\n          break;\n\n        case 'isEmail':\n          monitor(validation.isEmail(nodeRef.value), nodeRef, root);\n          break;\n\n        case 'equals':\n          monitor(validation.equals(nodeRef.value, rule[root][0]), nodeRef, root, rule[root][0]);\n          break;\n\n        case 'equalTo':\n          const found = nodeRefs.find(nodeRef => nodeRef.name === rule[root][0]);\n          monitor(validation.equals(nodeRef.value, found.value), nodeRef, root, rule[root][0]);\n          break;\n\n        case 'boolean':\n          monitor(validation.isBoolean(nodeRef.value), nodeRef, root);\n          break;\n\n        default:\n          break;\n      }\n    });\n  });\n  const valid = !Object.keys(errors).length ? true : false;\n  return {\n    valid,\n    errors\n  };\n};\n\nexport default validator;","map":{"version":3,"sources":["/home/zhana/Desktop/school-app/src/react-forms.js/services/validator.js"],"names":["validation","ruleBuilder","CHECKBOX","RADIO","SELECT_MULTIPLE","FILE","en","errors","eClass","monitor","valid","nodeRef","rule","value","name","classList","remove","errorMsg","replace","Array","isArray","push","add","validator","nodeRefs","errorClass","forEach","data","getAttribute","rules","root","Object","keys","node","type","checked","filter","call","options","option","selected","map","length","files","isEmail","equals","found","find","isBoolean"],"mappings":"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","sourcesContent":["import validation from 'validator'\n\nimport ruleBuilder from './ruleBuilder'\nimport { CHECKBOX, RADIO, SELECT_MULTIPLE, FILE } from '../constants'\n\nimport en from '../locales/en.json'\n\nlet errors = {}\nlet eClass = ''\n\nconst monitor = (valid, nodeRef, rule, value = '') => {\n  if (valid) {\n    if (!errors[nodeRef.name]) nodeRef.classList.remove(eClass)\n    return\n  }\n\n  const errorMsg = en[rule]\n    .replace(':attribute', nodeRef.name)\n    .replace(':value', value)\n\n  Array.isArray(errors[nodeRef.name])\n    ? errors[nodeRef.name].push(errorMsg)\n    : (errors[nodeRef.name] = [errorMsg])\n\n  return nodeRef.classList.add(eClass)\n}\n\nconst validator = (nodeRefs, errorClass = 'v-error') => {\n  errors = {}\n  eClass = errorClass\n\n  nodeRefs.forEach(nodeRef => {\n    const data = nodeRef.getAttribute('data-validator')\n\n    if (!data) return\n\n    const rules = ruleBuilder(data)\n    rules.forEach(rule => {\n      const root = Object.keys(rule)[0]\n      switch (root) {\n        case 'required':\n          let node = null\n          switch (nodeRef.type) {\n            case CHECKBOX:\n              node = nodeRef.checked\n              break\n            case RADIO:\n              node = nodeRef.checked\n              break\n            case SELECT_MULTIPLE:\n              node = [].filter\n                .call(nodeRef.options, option => option.selected)\n                .map(option => option.value).length\n              break\n            case FILE:\n              node = nodeRef.files.length\n              break\n            default:\n              node = nodeRef.value\n              break\n          }\n          monitor(node, nodeRef, root)\n          break\n        case 'isEmail':\n          monitor(validation.isEmail(nodeRef.value), nodeRef, root)\n          break\n        case 'equals':\n          monitor(\n            validation.equals(nodeRef.value, rule[root][0]),\n            nodeRef,\n            root,\n            rule[root][0]\n          )\n          break\n        case 'equalTo':\n          const found = nodeRefs.find(nodeRef => nodeRef.name === rule[root][0])\n          monitor(\n            validation.equals(nodeRef.value, found.value),\n            nodeRef,\n            root,\n            rule[root][0]\n          )\n          break\n        case 'boolean':\n          monitor(validation.isBoolean(nodeRef.value), nodeRef, root)\n          break\n        default:\n          break\n      }\n    })\n  })\n\n  const valid = !Object.keys(errors).length ? true : false\n\n  return { valid, errors }\n}\n\nexport default validator\n"]},"metadata":{},"sourceType":"module"}