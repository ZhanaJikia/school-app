//@flow strict

import type {
  ComponentType,
  Component,
  ElementConfig,
  Node,
  Context as ContextType,
} from 'react'
import type {Store, Event} from 'effector'

export type StoreConsumer<State> = ComponentType<{|
  children: (state: State) => Node,
|}>

export type StoreProvider<State> = ComponentType<{|
  value: State,
  children?: Node,
|}>

export type StoreComponent<State> = ComponentType<{|
  children: (state: State) => Node,
|}>

export type Gate<Props = {||}> = Class<Component<Props, {||}>> & {|
  isOpen: boolean,
  isTerminated: boolean,
  open: Event<void>,
  close: Event<void>,
  status: Store<boolean>,
  destructor: Event<void>,
  current: Props,
  state: Store<Props>,
  childGate<Next>(childName?: string): Gate<Next>,
|}

export type StoreView<State, Props = {||}> = ComponentType<Props> & {|
  mounted: Event<{|
    props: Props,
    state: State,
  |}>,
  unmounted: Event<{|
    props: Props,
    state: State,
  |}>,
|}

declare export function useStore<State>(store: Store<State>): State
declare export function useStoreMap<
  State,
  Result,
  Keys: $ReadOnlyArray<any>,
>(opts: {|
  +store: State,
  +keys: Keys,
  fn(state: State, keys: Keys): Result,
|}): Result
declare export function useGate<Props>(Gate: Gate<Props>, props?: Props): void

declare export function createGate<Props: {}>(name?: string): Gate<Props>
declare export function createGate<Props>(
  name: string,
  defaultState: Props,
): Gate<Props>

declare export function createComponent<
  Props,
  Shape: {+[key: string]: Store<any> | any, ...},
>(
  store: Shape,
  view: (
    props: Props,
    state: $ObjMap<
      Shape,
      //prettier-ignore
      <S>(field: Store<S> | S) => S,
    >,
  ) => Node,
): StoreView<
  $ObjMap<
    Shape,
    //prettier-ignore
    <S>(field: Store<S> | S) => S,
  >,
  Props,
>
declare export function createComponent<Props, State>(
  storeFactory: (initialProps: Props) => Store<State>,
  view: (props: Props, state: State) => Node,
): StoreView<State, Props>
declare export function createComponent<Props, State>(
  store: Store<State>,
  view: (props: Props, state: State) => Node,
): StoreView<State, Props>

declare export function createContextComponent<Props, State, Context>(
  store: Store<State>,
  context: ContextType<Context>,
  view: (props: Props, state: State, context: Context) => Node,
): ComponentType<Props>

declare export function connect<
  State: {[key: string]: any, ...},
  Com: ComponentType<*>,
>(
  Component: Com,
): (
  store: Store<State>,
) => ComponentType<$Exact<$Diff<ElementConfig<Com>, State>>>

declare export function createStoreConsumer<State>(
  store: Store<State>,
): StoreConsumer<State>

declare export function unstable_createStoreProvider<State>(
  store: Store<State>,
): StoreProvider<State>

declare export function createReactState<
  State: {[key: string]: any, ...},
  Com: ComponentType<*>,
>(
  store: Store<State>,
  Component: Com,
): ComponentType<$Exact<$Diff<ElementConfig<Com>, State>>>
